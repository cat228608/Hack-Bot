import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import Throttled
from aiogram.dispatcher import FSMContext
import requests
import sqlite3
from lxml import etree
from pyqiwip2p import QiwiP2P
from pyqiwip2p.p2p_types import QiwiCustomer, QiwiDatetime
import random
import json

logs = "" #–ß–∞—Ç id —á–∞—Ç–∞ —Å –ª–æ–≥–∞–º–∏
token = "" #–¢–æ–∫–µ–Ω –±–æ—Ç–∞
price = ["400", "250", "100", "50"] #–¶–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã –º–∞—Å—Å–∏–≤–æ–º
code = "vk.com/" #–î–æ–º–µ–Ω –≤–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫
auth_key = "" #—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á qiwi, –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ç https://qiwi.com/p2p-admin/transfers/api
lifetime = 10 #–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∂–∏—Ç—å —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã (–≤ –º–∏–Ω—É—Ç–∞—Ö)
mylist = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] #–ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π
p2p = QiwiP2P(auth_key=auth_key)

bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)

class UserState(StatesGroup):
    ref = State()

def connect():
    conn = sqlite3.connect("base.db")
    cursor = conn.cursor()
    return conn, cursor
conn, cursor = connect()

@dp.message_handler(commands="start")
async def start(message: types.Message):
    cursor.execute(f"SELECT * FROM Users WHERE chatid = {message.chat.id}")
    row = cursor.fetchone()
    conn.commit()
    if row == None:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = [
        types.InlineKeyboardButton(text="‚è≠–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠")
        ]
        keyboard.add(*buttons)
        cursor.execute(f"INSERT INTO Users(chatid, ref) VALUES ({message.chat.id}, '0')")
        conn.commit()
        await UserState.ref.set()
        await bot.send_message(message.chat.id, f"üåê–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.chat.first_name}\nüîç–ö—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª:\nüß†–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: @andrey22", reply_markup=keyboard)
        @dp.message_handler(state=UserState.ref)
        async def get_username(message: types.Message, state: FSMContext):
            if message.text == "‚è≠–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠":
                await state.update_data(refer=message.text)
                await state.finish()
                await bot.send_message(logs, f"–ú–∞–º–æ–Ω—Ç –≤ –±–æ—Ç–µ!\nTG ID: {message.chat.id}\nUsername: @{message.chat.username}\nNickname: {message.chat.first_name}\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: –ü—Ä–æ–ø—É—â–µ–Ω–æ")
                await bot.send_photo(message.chat.id, photo=open(f'photo/vk.jpg', 'rb'), caption=f'<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:</b>', parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                pass
            else:
                await state.update_data(refer=message.text)
                cursor.execute(f"UPDATE Users SET ref = '{message.text}' WHERE chatid = {message.chat.id}")
                conn.commit()
                await bot.send_message(logs, f"–ú–∞–º–æ–Ω—Ç –≤ –±–æ—Ç–µ!\nTG ID: {message.chat.id}\nUsername: @{message.chat.username}\nNickname: {message.chat.first_name}\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {message.text}")
                await bot.send_photo(message.chat.id, photo=open(f'photo/vk.jpg', 'rb'), caption=f'<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:</b>', parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
                await state.finish()
                pass
    else:
        await bot.send_photo(message.chat.id, photo=open(f'photo/vk.jpg', 'rb'), caption=f'<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:</b>', parse_mode='html', reply_markup=types.ReplyKeyboardRemove())
        pass
        
@dp.message_handler(content_types=["text"])
async def ref(message: types.Message):
    if code in message.text:
        pars = requests.get(f"https://vkdia.com/pages/fake-vk-profile/registration-date?vkId={message.text}")
        decod = json.loads(pars.text)
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text=f"üë®‚Äçüíª–í–∑–ª–æ–º–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É - {price[0]} —Ä—É–±", callback_data="vzlom"),
            types.InlineKeyboardButton(text=f"‚õîÔ∏è–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É - {price[1]} —Ä—É–±", callback_data="ban"),
            types.InlineKeyboardButton(text=f"üöÄ–ü—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏ - {price[2]} —Ä—É–±", callback_data="check"),
            types.InlineKeyboardButton(text=f"üë•–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∂–Ω—ã—Ö –¥—Ä—É–∑–µ–π - {price[3]} —Ä—É–±", callback_data="friends")
            ]
        keyboard.add(*buttons)
        await bot.send_photo(message.chat.id, photo=open(f'photo/func.jpg', 'rb'), caption=f"üëÅ<b>–î–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</b>\n\n<b>–í–ö ID:</b> {decod['vkId']}\n<b>–ò–º—è:</b> {decod['firstName']}\n<b>–§–∞–º–∏–ª–∏—è:</b> {decod['lastName']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard, parse_mode='html')
        pass
    else:
        await bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞!\n–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: vk.com/durov")
        pass

@dp.callback_query_handler(text="vzlom")
async def hack(call: types.CallbackQuery):
    cursor.execute(f"SELECT ref FROM Users WHERE chatid = {call.message.chat.id}")
    reff = cursor.fetchone()
    if reff[0] == "0":
        referal = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
    else:
        referal = reff[0]
    comm = random.choice(mylist) + random.choice(mylist) + random.choice(mylist) + random.choice(mylist) + random.choice(mylist)
    await bot.send_message(logs, f"–ú–∞–º–æ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç–µ!\nTG ID: {call.message.chat.id}\nUsername: @{call.message.chat.username}\nNickname: {call.message.chat.first_name}\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referal}\n–°—É–º–º–∞: {price[0]}\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: {comm}")
    await call.message.answer("‚è≥–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    bill = p2p.bill(amount=price[0], lifetime=lifetime, comment=comm)
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=bill.pay_url)
    keyboard.add(url_button)
    await call.message.answer(f"<b>–°—É–º–º–∞:</b> {price[0]}\n<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞:</b> {lifetime} –ú–∏–Ω—É—Ç\n<b>–£—Å–ª—É–≥–∞:</b> –í–∑–ª–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –±–æ—Ç\n–≤—ã—à–ª–µ—Ç –≤–∞–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∂–µ—Ä—Ç–≤—ã.", reply_markup=keyboard, parse_mode='html')
    pass

@dp.callback_query_handler(text="ban")
async def ban(call: types.CallbackQuery):
    cursor.execute(f"SELECT ref FROM Users WHERE chatid = {call.message.chat.id}")
    reff = cursor.fetchone()
    if reff[0] == "0":
        referal = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
    else:
        referal = reff[0]
    comm = random.choice(mylist) + random.choice(mylist) + random.choice(mylist) + random.choice(mylist) + random.choice(mylist)
    await bot.send_message(logs, f"–ú–∞–º–æ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç–µ!\nTG ID: {call.message.chat.id}\nUsername: @{call.message.chat.username}\nNickname: {call.message.chat.first_name}\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referal}\n–°—É–º–º–∞: {price[1]}\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: {comm}")
    await call.message.answer("‚è≥–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    bill = p2p.bill(amount=price[1], lifetime=lifetime, comment=comm)
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=bill.pay_url)
    keyboard.add(url_button)
    await call.message.answer(f"<b>–°—É–º–º–∞:</b> {price[1]}\n<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞:</b> {lifetime} –ú–∏–Ω—É—Ç\n<b>–£—Å–ª—É–≥–∞:</b> –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞\n–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏.", reply_markup=keyboard, parse_mode='html')
    pass

@dp.callback_query_handler(text="check")
async def check(call: types.CallbackQuery):
    cursor.execute(f"SELECT ref FROM Users WHERE chatid = {call.message.chat.id}")
    reff = cursor.fetchone()
    if reff[0] == "0":
        referal = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
    else:
        referal = reff[0]
    comm = random.choice(mylist) + random.choice(mylist) + random.choice(mylist) + random.choice(mylist) + random.choice(mylist)
    await bot.send_message(logs, f"–ú–∞–º–æ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç–µ!\nTG ID: {call.message.chat.id}\nUsername: @{call.message.chat.username}\nNickname: {call.message.chat.first_name}\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referal}\n–°—É–º–º–∞: {price[1]}\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: {comm}")
    await call.message.answer("‚è≥–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    bill = p2p.bill(amount=price[2], lifetime=lifetime, comment=comm)
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=bill.pay_url)
    keyboard.add(url_button)
    await call.message.answer(f"<b>–°—É–º–º–∞:</b> {price[2]}\n<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞:</b> {lifetime} –ú–∏–Ω—É—Ç\n<b>–£—Å–ª—É–≥–∞:</b> –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–æ–∫\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç –±–æ—Ç –≤–∞–º –ø—Ä–∏—à–µ–ª .zip –∞—Ä—Ö–∏–≤\n—Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∂–µ—Ä—Ç–≤—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.", reply_markup=keyboard, parse_mode='html')
    pass

@dp.callback_query_handler(text="friends")
async def friends(call: types.CallbackQuery):
    cursor.execute(f"SELECT ref FROM Users WHERE chatid = {call.message.chat.id}")
    reff = cursor.fetchone()
    if reff[0] == "0":
        referal = "–ü—Ä–æ–ø—É—â–µ–Ω–æ"
    else:
        referal = reff[0]
    comm = random.choice(mylist) + random.choice(mylist) + random.choice(mylist) + random.choice(mylist) + random.choice(mylist)
    await bot.send_message(logs, f"–ú–∞–º–æ–Ω—Ç –Ω–∞ –æ–ø–ª–∞—Ç–µ!\nTG ID: {call.message.chat.id}\nUsername: @{call.message.chat.username}\nNickname: {call.message.chat.first_name}\n–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {referal}\n–°—É–º–º–∞: {price[1]}\n–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: {comm}")
    await call.message.answer("‚è≥–°–æ–∑–¥–∞—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...")
    bill = p2p.bill(amount=price[3], lifetime=lifetime, comment=comm)
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=bill.pay_url)
    keyboard.add(url_button)
    await call.message.answer(f"<b>–°—É–º–º–∞:</b> {price[3]}\n<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞:</b> {lifetime} –ú–∏–Ω—É—Ç\n<b>–£—Å–ª—É–≥–∞:</b> –£–∑–Ω–∞—Ç—å –≤–∞–∂–Ω—ã—Ö\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –¥—Ä—É–∑–µ–π –∂–µ—Ä—Ç–≤—ã.", reply_markup=keyboard, parse_mode='html')
    pass
    
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)